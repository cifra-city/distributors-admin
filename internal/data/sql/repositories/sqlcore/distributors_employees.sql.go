// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: distributors_employees.sql

package sqlcore

import (
	"context"

	"github.com/google/uuid"
)

const createDistributorEmployees = `-- name: CreateDistributorEmployees :one
INSERT INTO distributors_employees (id, distributors_id, user_id, role)
VALUES ($1, $2, $3, $4)
    RETURNING id, distributors_id, user_id, role, created_at
`

type CreateDistributorEmployeesParams struct {
	ID             uuid.UUID
	DistributorsID uuid.UUID
	UserID         uuid.UUID
	Role           Roles
}

func (q *Queries) CreateDistributorEmployees(ctx context.Context, arg CreateDistributorEmployeesParams) (DistributorsEmployee, error) {
	row := q.db.QueryRowContext(ctx, createDistributorEmployees,
		arg.ID,
		arg.DistributorsID,
		arg.UserID,
		arg.Role,
	)
	var i DistributorsEmployee
	err := row.Scan(
		&i.ID,
		&i.DistributorsID,
		&i.UserID,
		&i.Role,
		&i.CreatedAt,
	)
	return i, err
}

const deleteDistributorEmployees = `-- name: DeleteDistributorEmployees :exec
DELETE FROM distributors_employees
WHERE id = $1
`

func (q *Queries) DeleteDistributorEmployees(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteDistributorEmployees, id)
	return err
}

const deleteDistributorEmployeesByDistributorIDAndUserId = `-- name: DeleteDistributorEmployeesByDistributorIDAndUserId :exec
DELETE FROM distributors_employees
WHERE distributors_id = $1 AND user_id = $2
`

type DeleteDistributorEmployeesByDistributorIDAndUserIdParams struct {
	DistributorsID uuid.UUID
	UserID         uuid.UUID
}

func (q *Queries) DeleteDistributorEmployeesByDistributorIDAndUserId(ctx context.Context, arg DeleteDistributorEmployeesByDistributorIDAndUserIdParams) error {
	_, err := q.db.ExecContext(ctx, deleteDistributorEmployeesByDistributorIDAndUserId, arg.DistributorsID, arg.UserID)
	return err
}

const getDistributorEmployeesByDistributorID = `-- name: GetDistributorEmployeesByDistributorID :many
SELECT id, distributors_id, user_id, role, created_at FROM distributors_employees
WHERE distributors_id = $1
`

func (q *Queries) GetDistributorEmployeesByDistributorID(ctx context.Context, distributorsID uuid.UUID) ([]DistributorsEmployee, error) {
	rows, err := q.db.QueryContext(ctx, getDistributorEmployeesByDistributorID, distributorsID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []DistributorsEmployee
	for rows.Next() {
		var i DistributorsEmployee
		if err := rows.Scan(
			&i.ID,
			&i.DistributorsID,
			&i.UserID,
			&i.Role,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getDistributorEmployeesByDistributorIDAndUserID = `-- name: GetDistributorEmployeesByDistributorIDAndUserID :one
SELECT id, distributors_id, user_id, role, created_at FROM distributors_employees
WHERE distributors_id = $1 AND user_id = $2
`

type GetDistributorEmployeesByDistributorIDAndUserIDParams struct {
	DistributorsID uuid.UUID
	UserID         uuid.UUID
}

func (q *Queries) GetDistributorEmployeesByDistributorIDAndUserID(ctx context.Context, arg GetDistributorEmployeesByDistributorIDAndUserIDParams) (DistributorsEmployee, error) {
	row := q.db.QueryRowContext(ctx, getDistributorEmployeesByDistributorIDAndUserID, arg.DistributorsID, arg.UserID)
	var i DistributorsEmployee
	err := row.Scan(
		&i.ID,
		&i.DistributorsID,
		&i.UserID,
		&i.Role,
		&i.CreatedAt,
	)
	return i, err
}

const getDistributorEmployeesByID = `-- name: GetDistributorEmployeesByID :one
SELECT id, distributors_id, user_id, role, created_at FROM distributors_employees
WHERE id = $1
`

func (q *Queries) GetDistributorEmployeesByID(ctx context.Context, id uuid.UUID) (DistributorsEmployee, error) {
	row := q.db.QueryRowContext(ctx, getDistributorEmployeesByID, id)
	var i DistributorsEmployee
	err := row.Scan(
		&i.ID,
		&i.DistributorsID,
		&i.UserID,
		&i.Role,
		&i.CreatedAt,
	)
	return i, err
}

const getDistributorEmployeesByUserID = `-- name: GetDistributorEmployeesByUserID :many
SELECT id, distributors_id, user_id, role, created_at FROM distributors_employees
WHERE user_id = $1
`

func (q *Queries) GetDistributorEmployeesByUserID(ctx context.Context, userID uuid.UUID) ([]DistributorsEmployee, error) {
	rows, err := q.db.QueryContext(ctx, getDistributorEmployeesByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []DistributorsEmployee
	for rows.Next() {
		var i DistributorsEmployee
		if err := rows.Scan(
			&i.ID,
			&i.DistributorsID,
			&i.UserID,
			&i.Role,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listDistributorEmployees = `-- name: ListDistributorEmployees :many
SELECT id, distributors_id, user_id, role, created_at FROM distributors_employees
WHERE distributors_id = $1
ORDER BY created_at DESC
`

func (q *Queries) ListDistributorEmployees(ctx context.Context, distributorsID uuid.UUID) ([]DistributorsEmployee, error) {
	rows, err := q.db.QueryContext(ctx, listDistributorEmployees, distributorsID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []DistributorsEmployee
	for rows.Next() {
		var i DistributorsEmployee
		if err := rows.Scan(
			&i.ID,
			&i.DistributorsID,
			&i.UserID,
			&i.Role,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateDistributorEmployees = `-- name: UpdateDistributorEmployees :one
UPDATE distributors_employees
SET role = $2
WHERE id = $1
    RETURNING id, distributors_id, user_id, role, created_at
`

type UpdateDistributorEmployeesParams struct {
	ID   uuid.UUID
	Role Roles
}

func (q *Queries) UpdateDistributorEmployees(ctx context.Context, arg UpdateDistributorEmployeesParams) (DistributorsEmployee, error) {
	row := q.db.QueryRowContext(ctx, updateDistributorEmployees, arg.ID, arg.Role)
	var i DistributorsEmployee
	err := row.Scan(
		&i.ID,
		&i.DistributorsID,
		&i.UserID,
		&i.Role,
		&i.CreatedAt,
	)
	return i, err
}

const updateDistributorEmployeesByDistributorIDAndUserID = `-- name: UpdateDistributorEmployeesByDistributorIDAndUserID :one
UPDATE distributors_employees
SET role = $3
WHERE distributors_id = $1 AND user_id = $2
    RETURNING id, distributors_id, user_id, role, created_at
`

type UpdateDistributorEmployeesByDistributorIDAndUserIDParams struct {
	DistributorsID uuid.UUID
	UserID         uuid.UUID
	Role           Roles
}

func (q *Queries) UpdateDistributorEmployeesByDistributorIDAndUserID(ctx context.Context, arg UpdateDistributorEmployeesByDistributorIDAndUserIDParams) (DistributorsEmployee, error) {
	row := q.db.QueryRowContext(ctx, updateDistributorEmployeesByDistributorIDAndUserID, arg.DistributorsID, arg.UserID, arg.Role)
	var i DistributorsEmployee
	err := row.Scan(
		&i.ID,
		&i.DistributorsID,
		&i.UserID,
		&i.Role,
		&i.CreatedAt,
	)
	return i, err
}
