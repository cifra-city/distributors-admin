/*
Title

Title

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package resources

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the PlaceEmployeeUpdateDataAttributes type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PlaceEmployeeUpdateDataAttributes{}

// PlaceEmployeeUpdateDataAttributes struct for PlaceEmployeeUpdateDataAttributes
type PlaceEmployeeUpdateDataAttributes struct {
	// User role
	Role string `json:"role"`
	// Distributor ID
	DistributorId string `json:"distributor_id"`
}

type _PlaceEmployeeUpdateDataAttributes PlaceEmployeeUpdateDataAttributes

// NewPlaceEmployeeUpdateDataAttributes instantiates a new PlaceEmployeeUpdateDataAttributes object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPlaceEmployeeUpdateDataAttributes(role string, distributorId string) *PlaceEmployeeUpdateDataAttributes {
	this := PlaceEmployeeUpdateDataAttributes{}
	this.Role = role
	this.DistributorId = distributorId
	return &this
}

// NewPlaceEmployeeUpdateDataAttributesWithDefaults instantiates a new PlaceEmployeeUpdateDataAttributes object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPlaceEmployeeUpdateDataAttributesWithDefaults() *PlaceEmployeeUpdateDataAttributes {
	this := PlaceEmployeeUpdateDataAttributes{}
	return &this
}

// GetRole returns the Role field value
func (o *PlaceEmployeeUpdateDataAttributes) GetRole() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Role
}

// GetRoleOk returns a tuple with the Role field value
// and a boolean to check if the value has been set.
func (o *PlaceEmployeeUpdateDataAttributes) GetRoleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Role, true
}

// SetRole sets field value
func (o *PlaceEmployeeUpdateDataAttributes) SetRole(v string) {
	o.Role = v
}

// GetDistributorId returns the DistributorId field value
func (o *PlaceEmployeeUpdateDataAttributes) GetDistributorId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DistributorId
}

// GetDistributorIdOk returns a tuple with the DistributorId field value
// and a boolean to check if the value has been set.
func (o *PlaceEmployeeUpdateDataAttributes) GetDistributorIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DistributorId, true
}

// SetDistributorId sets field value
func (o *PlaceEmployeeUpdateDataAttributes) SetDistributorId(v string) {
	o.DistributorId = v
}

func (o PlaceEmployeeUpdateDataAttributes) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PlaceEmployeeUpdateDataAttributes) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["role"] = o.Role
	toSerialize["distributor_id"] = o.DistributorId
	return toSerialize, nil
}

func (o *PlaceEmployeeUpdateDataAttributes) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"role",
		"distributor_id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPlaceEmployeeUpdateDataAttributes := _PlaceEmployeeUpdateDataAttributes{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPlaceEmployeeUpdateDataAttributes)

	if err != nil {
		return err
	}

	*o = PlaceEmployeeUpdateDataAttributes(varPlaceEmployeeUpdateDataAttributes)

	return err
}

type NullablePlaceEmployeeUpdateDataAttributes struct {
	value *PlaceEmployeeUpdateDataAttributes
	isSet bool
}

func (v NullablePlaceEmployeeUpdateDataAttributes) Get() *PlaceEmployeeUpdateDataAttributes {
	return v.value
}

func (v *NullablePlaceEmployeeUpdateDataAttributes) Set(val *PlaceEmployeeUpdateDataAttributes) {
	v.value = val
	v.isSet = true
}

func (v NullablePlaceEmployeeUpdateDataAttributes) IsSet() bool {
	return v.isSet
}

func (v *NullablePlaceEmployeeUpdateDataAttributes) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePlaceEmployeeUpdateDataAttributes(val *PlaceEmployeeUpdateDataAttributes) *NullablePlaceEmployeeUpdateDataAttributes {
	return &NullablePlaceEmployeeUpdateDataAttributes{value: val, isSet: true}
}

func (v NullablePlaceEmployeeUpdateDataAttributes) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePlaceEmployeeUpdateDataAttributes) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


