/*
Title

Title

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package resources

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the PlaceEmployeeCreateDataAttributes type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PlaceEmployeeCreateDataAttributes{}

// PlaceEmployeeCreateDataAttributes struct for PlaceEmployeeCreateDataAttributes
type PlaceEmployeeCreateDataAttributes struct {
	Username string `json:"username"`
	// role for user
	Role string `json:"role"`
	// Distributor ID
	DistributorId string `json:"distributor_id"`
}

type _PlaceEmployeeCreateDataAttributes PlaceEmployeeCreateDataAttributes

// NewPlaceEmployeeCreateDataAttributes instantiates a new PlaceEmployeeCreateDataAttributes object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPlaceEmployeeCreateDataAttributes(username string, role string, distributorId string) *PlaceEmployeeCreateDataAttributes {
	this := PlaceEmployeeCreateDataAttributes{}
	this.Username = username
	this.Role = role
	this.DistributorId = distributorId
	return &this
}

// NewPlaceEmployeeCreateDataAttributesWithDefaults instantiates a new PlaceEmployeeCreateDataAttributes object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPlaceEmployeeCreateDataAttributesWithDefaults() *PlaceEmployeeCreateDataAttributes {
	this := PlaceEmployeeCreateDataAttributes{}
	return &this
}

// GetUsername returns the Username field value
func (o *PlaceEmployeeCreateDataAttributes) GetUsername() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Username
}

// GetUsernameOk returns a tuple with the Username field value
// and a boolean to check if the value has been set.
func (o *PlaceEmployeeCreateDataAttributes) GetUsernameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Username, true
}

// SetUsername sets field value
func (o *PlaceEmployeeCreateDataAttributes) SetUsername(v string) {
	o.Username = v
}

// GetRole returns the Role field value
func (o *PlaceEmployeeCreateDataAttributes) GetRole() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Role
}

// GetRoleOk returns a tuple with the Role field value
// and a boolean to check if the value has been set.
func (o *PlaceEmployeeCreateDataAttributes) GetRoleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Role, true
}

// SetRole sets field value
func (o *PlaceEmployeeCreateDataAttributes) SetRole(v string) {
	o.Role = v
}

// GetDistributorId returns the DistributorId field value
func (o *PlaceEmployeeCreateDataAttributes) GetDistributorId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DistributorId
}

// GetDistributorIdOk returns a tuple with the DistributorId field value
// and a boolean to check if the value has been set.
func (o *PlaceEmployeeCreateDataAttributes) GetDistributorIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DistributorId, true
}

// SetDistributorId sets field value
func (o *PlaceEmployeeCreateDataAttributes) SetDistributorId(v string) {
	o.DistributorId = v
}

func (o PlaceEmployeeCreateDataAttributes) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PlaceEmployeeCreateDataAttributes) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["username"] = o.Username
	toSerialize["role"] = o.Role
	toSerialize["distributor_id"] = o.DistributorId
	return toSerialize, nil
}

func (o *PlaceEmployeeCreateDataAttributes) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"username",
		"role",
		"distributor_id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPlaceEmployeeCreateDataAttributes := _PlaceEmployeeCreateDataAttributes{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPlaceEmployeeCreateDataAttributes)

	if err != nil {
		return err
	}

	*o = PlaceEmployeeCreateDataAttributes(varPlaceEmployeeCreateDataAttributes)

	return err
}

type NullablePlaceEmployeeCreateDataAttributes struct {
	value *PlaceEmployeeCreateDataAttributes
	isSet bool
}

func (v NullablePlaceEmployeeCreateDataAttributes) Get() *PlaceEmployeeCreateDataAttributes {
	return v.value
}

func (v *NullablePlaceEmployeeCreateDataAttributes) Set(val *PlaceEmployeeCreateDataAttributes) {
	v.value = val
	v.isSet = true
}

func (v NullablePlaceEmployeeCreateDataAttributes) IsSet() bool {
	return v.isSet
}

func (v *NullablePlaceEmployeeCreateDataAttributes) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePlaceEmployeeCreateDataAttributes(val *PlaceEmployeeCreateDataAttributes) *NullablePlaceEmployeeCreateDataAttributes {
	return &NullablePlaceEmployeeCreateDataAttributes{value: val, isSet: true}
}

func (v NullablePlaceEmployeeCreateDataAttributes) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePlaceEmployeeCreateDataAttributes) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


